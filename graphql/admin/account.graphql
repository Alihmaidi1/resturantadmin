extend type Query{
    getalladmin:[Admin!]  @guard @can(model:"App\\Models\\admin",ability:"admin")
    me:Admin @guard @auth
    getpermission:PermissionArray @guard @can(ability:"role",model:"App\\Models\\admin")
    admininfo(id:ID):Admin @guard @validator @can(model:"App\\Models\\admin",ability:"admin") @can(model:"App\\Models\\admin",ability:"view",injectArgs: true)

}

extend type Mutation{

    login(email:String,password:String,resturant_id:ID):Admin!   @validator
    token(your_refresh_token: String!): Token! @validator
    resetemail(email:String,resturant_id:ID):Message1  @validator
    logout:Admin @guard
    changepassword(password:String):Admin @validator @guard
    checkresetcode(code:String):Message1 @validator @guard(with:["reset_password"])
    createadmin(email:String,password:String,role_id:ID,resturant_id:ID,rank:Int,name:String,age:Int,gender:Int):Admin @guard @validator @can(model:"App\\Models\\admin",ability: "create", injectArgs: true) @can(model:"App\\Models\\admin",ability:"admin")
    deleteadmin(id:ID):Admin @guard @validator @can(model:"App\\Models\\admin",ability:"admin") @can(model:"App\\Models\\admin",ability:"forceDelete",injectArgs:true)
    updateemail(email:String,name:String,age:Int,gender:Int): Admin @guard @validator
    updateadmin(id:ID,email:String,role_id:ID,resturant_id:ID,rank:Int,password:String,name:String,age:Int,gender:Int): Admin @guard @validator  @can(model:"App\\Models\\admin",ability:"admin") @can(model:"App\\Models\\admin",ability:"update",injectArgs:true)
}



type Admin{
    id:ID
    message:String
    name:String
    age:Int
    gender:String
    token_info:Token
    email:String
    role:Role @belongsTo
    rank:Int
    resturant: Resturant @belongsTo
}


type Token{
    access_token:String
    token_type:String
    expires_in:String
    refresh_token:String
}

type Permssion{

    category: String

}

type PermissionArray{

    key:[String]
    value:[String]


}

type Message1{

    message: String
    token: String
}
